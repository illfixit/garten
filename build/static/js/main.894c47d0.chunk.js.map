{"version":3,"sources":["Components/MainScreenContainer/Radius.js","Components/MainScreenContainer/Timer.js","Components/MainScreenContainer/PlantSettings.js","Components/MainScreenContainer/SessionSettings.js","Components/MainScreenContainer/Buttons.js","Components/MainScreenContainer/Plant.js","Components/MainScreenContainer/SessionPlant.js","Components/MainScreenContainer/PausePlant.js","Components/MainScreenContainer/SessionControl.js","Components/MainScreenContainer/MainScreen.js","App.js","index.js"],"names":["Radius","props","step","useRef","startStep","useEffect","rotateCircle","document","querySelector","current","timerActive","element","degree","transformString","concat","style","webkitTransform","MozTransform","msTransform","OTransform","transform","parentElement","background","react_default","a","createElement","es","onPan","event","target","className","rect","getBoundingClientRect","x","center","width","y","height","atan","Math","atan2","integer","floor","newStep","abs","setTimeStep","setStartStep","Timer","_ref","timeStep","setTimerActive","currentActivity","setCurrentActivity","GIFSArray","currentGIF","numberOfSessions","currentSession","setCurrentSession","_useState","useState","_useState2","Object","slicedToArray","totalSeconds","setTotalSeconds","_useState3","_useState4","intrvl","setIntrvl","formatTime","time","toString","padStart","audio","Audio","setInterval","clearInterval","minutes","seconds","play","backgroundImage","PlantSettings","useGIF","e","gifId","firstChild","innerText","console","log","length","setCurrentGIF","getElementById","deleteGIF","setGIFSArray","filter","g","idx","map","key","slice","src","onClick","id","placeholder","gifUrl","value","trim","toConsumableArray","SessionSettings","classname","setNumberOfSessions","Buttons","Fragment","Plant","plantContainerBoundaries","MainScreenContainer_Radius","MainScreenContainer_Timer","MainScreenContainer_Buttons","MainScreenContainer_SessionSettings","MainScreenContainer_PlantSettings","SessionPlant","MainScreenContainer_Plant","sessionStartStep","setSessionStartStep","PausePlant","pauseStartStep","setPauseStartStep","SessionControl","classList","remove","add","MainScreen","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","pauseGIFSArray","setPauseGIFSArray","_useState13","_useState14","sessionGIFSArray","setSessionGIFSArray","_useState15","_useState16","currentSessionGIF","setCurrentSessionGIF","_useState17","_useState18","currentPauseGIF","setCurrentPauseGIF","MainScreenContainer_SessionControl","MainScreenContainer_SessionPlant","MainScreenContainer_PausePlant","App","MainScreenContainer_MainScreen","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.894c47d0.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport Hammer from \"rc-hammerjs\";\r\n\r\n// let lastStep = 0;\r\n\r\nconst Radius = (props) => {\r\n  // useEffect(() => {\r\n  //   return document.querySelector(\".plantContainer\").addEventListener(\r\n  //     \"touchmove\",\r\n  //     (e) => {\r\n  //       e.preventDefault();\r\n  //     },\r\n  //     { passive: false }\r\n  //   );\r\n  // });\r\n\r\n  // console.log(props.startStep);\r\n\r\n  const step = useRef(props.startStep);\r\n  const interval = 180 / 11.5;\r\n\r\n  useEffect(() => {\r\n    // console.log(\"toggle Timer: active: \", props.timerActive, step.current);\r\n    rotateCircle(document.querySelector(\".radius\"), step.current * interval);\r\n  }, [props.timerActive]);\r\n\r\n  const rotateCircle = (element, degree) => {\r\n    let transformString = `rotate(${degree}deg) scale(1) skewX(0deg) skewY(0deg)`;\r\n\r\n    // now attach that variable to each prefixed style\r\n    element.style.webkitTransform = transformString;\r\n    element.style.MozTransform = transformString;\r\n    element.style.msTransform = transformString;\r\n    element.style.OTransform = transformString;\r\n    element.style.transform = transformString;\r\n\r\n    element.parentElement.style.background = `conic-gradient(mediumslateblue ${degree}deg, rosybrown 0deg)`;\r\n  };\r\n\r\n  const handlePan = (event) => {\r\n    if (\r\n      event.target.className === \"radius\" ||\r\n      event.target.className === \"radiusCircle\"\r\n    ) {\r\n      // console.log(\"handlePan\");\r\n\r\n      let rect;\r\n      if (event.target.className === \"radius\")\r\n        rect = event.target.parentElement.getBoundingClientRect();\r\n      if (event.target.className === \"radiusCircle\")\r\n        rect = event.target.parentElement.parentElement.getBoundingClientRect();\r\n\r\n      let x = (event.center.x - rect.x) / rect.width - 0.5; //x position within the element.\r\n      let y = 0.5 - (event.center.y - rect.y) / rect.height; //y position within the element.\r\n\r\n      let atan = (Math.atan2(y, x) * 180) / 3.1415;\r\n      if (atan < -180) atan = -180;\r\n      if (atan > 180) atan = 180;\r\n\r\n      let degree = 0;\r\n\r\n      if (atan <= 90 && atan >= -180) degree = -atan + 90;\r\n      if (atan > 90 && atan <= 180) degree = -atan + 450;\r\n      if (degree > 0 && degree < 10) degree = 0;\r\n\r\n      let integer = Math.floor(degree / interval);\r\n      let decimal = degree - integer;\r\n\r\n      let newStep = decimal >= 0.5 ? integer + 1 : integer;\r\n      step.current =\r\n        Math.abs(step.current - newStep) > 3 ? step.current : newStep;\r\n\r\n      rotateCircle(document.querySelector(\".radius\"), step.current * interval);\r\n\r\n      props.setTimeStep(step.current);\r\n      props.setStartStep(step.current);\r\n    }\r\n  };\r\n\r\n  // const hammerOptions = {\r\n  //   touchAction: \"compute\",\r\n  //   recognizers: {\r\n  //     tap: {\r\n  //       time: 1,\r\n  //       threshold: 1,\r\n  //     },\r\n  //     press: {\r\n  //       //   // time: 3000\r\n  //       threshold: 1,\r\n  //     },\r\n  //     pan: {\r\n  //       threshold: 100,\r\n  //       // direction: \"DIRECTION_ALL\",\r\n  //     },\r\n  //   },\r\n  // };\r\n\r\n  return (\r\n    <Hammer\r\n      onPan={handlePan}\r\n      // options={hammerOptions}\r\n      // direction=\"DIRECTION_ALL\"\r\n    >\r\n      <div className={`radius${props.timerActive ? \" hidden\" : \"\"}`}>\r\n        <div\r\n          className={`radiusCircle${props.timerActive ? \" hidden\" : \"\"}`}\r\n        ></div>\r\n      </div>\r\n    </Hammer>\r\n  );\r\n};\r\n\r\nexport default Radius;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst Timer = ({\r\n  startStep,\r\n  timeStep,\r\n  setTimeStep,\r\n  timerActive,\r\n  setTimerActive,\r\n  currentActivity,\r\n  setCurrentActivity,\r\n  GIFSArray,\r\n  currentGIF,\r\n  numberOfSessions,\r\n  currentSession,\r\n  setCurrentSession,\r\n}) => {\r\n  const [totalSeconds, setTotalSeconds] = useState((5 + startStep * 5) * 60);\r\n  const [intrvl, setIntrvl] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setTimeStep(startStep);\r\n  });\r\n\r\n  const formatTime = (time) => time.toString().padStart(2, \"0\");\r\n\r\n  const audio = new Audio(\"./static/sounds/uplifting-flute.mp3\");\r\n\r\n  useEffect(() => {\r\n    setTotalSeconds((5 + timeStep * 5) * 60);\r\n  }, [timeStep, startStep]);\r\n\r\n  useEffect(() => {\r\n    if (timerActive) {\r\n      setIntrvl(\r\n        setInterval(() => {\r\n          if (timerActive === true) {\r\n            setTotalSeconds((totalSeconds) => totalSeconds - 1);\r\n          }\r\n        }, 1000)\r\n      );\r\n    } else {\r\n      setTimeStep(timeStep);\r\n      setTotalSeconds((5 + timeStep * 5) * 60);\r\n      clearInterval(intrvl);\r\n    }\r\n\r\n    return () => clearInterval(intrvl);\r\n  }, [timerActive]);\r\n\r\n  // console.log(totalSeconds);\r\n\r\n  let minutes = Math.floor(totalSeconds / 60);\r\n  let seconds = totalSeconds - Math.floor(totalSeconds / 60) * 60;\r\n\r\n  if (totalSeconds === 0) {\r\n    audio.play();\r\n    clearInterval(intrvl);\r\n    setTimerActive(false);\r\n    if (currentActivity === \"session\") setCurrentSession(currentSession + 1);\r\n    setCurrentActivity(currentActivity === \"pause\" ? \"session\" : \"pause\");\r\n    // setTotalSeconds((5 + timeStep * 5) * 60);\r\n    // setTimeStep(timeStep);\r\n  }\r\n\r\n  if (totalSeconds <= 0) {\r\n    minutes = 0;\r\n    seconds = 0;\r\n  }\r\n\r\n  // console.log(GIFSArray[currentGIF]);\r\n  // backgroundImage: GIFSArray[currentGIF]\r\n\r\n  return (\r\n    <div className=\"timerContainer\">\r\n      <div\r\n        className={`timerBackground ${\r\n          currentActivity === \"session\"\r\n            ? \"sessionBackground\"\r\n            : \"pauseBackground\"\r\n        }`}\r\n        style={{ backgroundImage: `url(${GIFSArray[currentGIF]})` }}\r\n      ></div>\r\n      <div className=\"timer\">\r\n        {formatTime(minutes)}:{formatTime(seconds)}\r\n      </div>\r\n      <div className=\"timerText\">\r\n        {currentActivity === \"session\"\r\n          ? `Session ${currentSession}/${numberOfSessions}`\r\n          : \"Pause\"}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\n\r\nconst PlantSettings = (props) => {\r\n  const addGIF = (e) => {\r\n    // console.log(e)\r\n\r\n    let gifUrl = document.getElementById(\"url_input\").value;\r\n    if (gifUrl.trim()) props.setGIFSArray([...props.GIFSArray, gifUrl]);\r\n    document.getElementById(\"url_input\").value = \"\";\r\n    // console.log(props.GIFSArray);\r\n  };\r\n\r\n  const useGIF = (e) => {\r\n    let gifId = e.target.parentElement.firstChild.innerText - 1;\r\n    console.log(gifId, props.GIFSArray.length);\r\n    if (gifId >= 0 && gifId <= props.GIFSArray.length) {\r\n      props.setCurrentGIF(gifId);\r\n      //   console.log(`url(${props.GIFSArray[gifId - 1]})`);\r\n      if (document.getElementById(`${props.currentActivity}Background`)) {\r\n        document.getElementById(\r\n          `${props.currentActivity}Background`\r\n        ).style.backgroundImage = `url(${props.GIFSArray[gifId]})`;\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteGIF = (e) => {\r\n    let gifId = e.target.parentElement.firstChild.innerText - 1;\r\n    console.log(gifId, props.currentGIF);\r\n    if (\r\n      gifId >= 0 &&\r\n      gifId <= props.GIFSArray.length &&\r\n      gifId != props.currentGIF\r\n    ) {\r\n      props.setGIFSArray(props.GIFSArray.filter((g, idx) => idx != gifId));\r\n      if (gifId < props.currentGIF) props.setCurrentGIF(props.currentGIF - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"settingsContainer\">\r\n      {props.GIFSArray.map((g, idx) => (\r\n        <div\r\n          className=\"settings_options\"\r\n          key={`${g.slice(0, 5) + g.slice(-5)}`}\r\n        >\r\n          <p>{idx + 1}</p>\r\n          <img className=\"gif_preview\" src={g} />\r\n          <button className=\"settings_button\" onClick={useGIF}>\r\n            Use\r\n          </button>\r\n          <button className=\"settings_button delete_button\" onClick={deleteGIF}>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      ))}\r\n\r\n      <div className=\"input_container settings_options\">\r\n        <input\r\n          id=\"url_input\"\r\n          className=\"background_input\"\r\n          placeholder=\"Paste GIF's URL here\"\r\n        ></input>\r\n        <button className=\"settings_button\" onClick={addGIF}>\r\n          Add\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantSettings;\r\n","import React from \"react\";\r\n\r\nconst SessionSettings = (props) => {\r\n  const decreaseNumberOfSessions = () => {\r\n    if (props.numberOfSessions > 1)\r\n      props.setNumberOfSessions(props.numberOfSessions - 1);\r\n  };\r\n\r\n  const increaseNumberOfSessions = () => {\r\n    props.setNumberOfSessions(props.numberOfSessions + 1);\r\n  };\r\n\r\n  return (\r\n    <div classname=\"sessionSettings\">\r\n      <div className=\"settings_options\">\r\n        <p>How many sessions today?</p>\r\n        <button\r\n          id=\"lessSessions\"\r\n          className=\"sessionSettingsButton\"\r\n          onClick={decreaseNumberOfSessions}\r\n        >\r\n          -\r\n        </button>\r\n        <p id=\"numberOfSessions\">{props.numberOfSessions}</p>\r\n        <button\r\n          id=\"moreSessions\"\r\n          className=\"sessionSettingsButton\"\r\n          onClick={increaseNumberOfSessions}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n      {/* <div className=\"settings_options\">\r\n        <p>Auto start next session/pause?</p>\r\n        <button className=\"sessionSettingsButton\">Yes</button>\r\n        <button className=\"sessionSettingsButton noButton\">No</button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SessionSettings;\r\n","import React from \"react\";\r\n\r\nconst Buttons = ({ timerActive, setTimerActive }) => {\r\n  return timerActive ? (\r\n    <React.Fragment>\r\n      <button\r\n        className=\"mainScreenButtons\"\r\n        onClick={() => setTimerActive(false)}\r\n      >\r\n        Give Up\r\n      </button>\r\n    </React.Fragment>\r\n  ) : (\r\n    <button className=\"mainScreenButtons\" onClick={() => setTimerActive(true)}>\r\n      Start\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Radius from \"./Radius\";\r\nimport Timer from \"./Timer\";\r\nimport PlantSettings from \"./PlantSettings\";\r\nimport SessionSettings from \"./SessionSettings\";\r\n\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst Plant = (props) => {\r\n  console.log(props);\r\n  const [timeStep, setTimeStep] = useState(0);\r\n  const [timerActive, setTimerActive] = useState(false);\r\n\r\n  // if (document.querySelector(\"plantContainer\")) {\r\n  //   let plantContainer = document\r\n  //     .querySelector(\"plantContainer\")\r\n  //     .getBoundingClientRect();\r\n  //   console.log(plantContainer);\r\n  // }\r\n\r\n  let plantContainerBoundaries = null;\r\n\r\n  useEffect(() => {\r\n    if (document.querySelector(\".plantContainer\")) {\r\n      plantContainerBoundaries = document\r\n        .querySelector(\".plantContainer\")\r\n        .getBoundingClientRect();\r\n      // console.log(plantContainerBoundaries);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className={`plantContainer ${timerActive ? \"noRadius\" : \"\"}`}>\r\n        <Radius\r\n          plantContainerBoundaries={plantContainerBoundaries}\r\n          setTimeStep={setTimeStep}\r\n          timerActive={timerActive}\r\n          startStep={props.startStep}\r\n          setStartStep={props.setStartStep}\r\n        />\r\n\r\n        <div className=\"plant\">\r\n          <Timer\r\n            startStep={props.startStep}\r\n            timeStep={timeStep}\r\n            setTimeStep={setTimeStep}\r\n            timerActive={timerActive}\r\n            setTimerActive={setTimerActive}\r\n            currentActivity={props.currentActivity}\r\n            setCurrentActivity={props.setCurrentActivity}\r\n            GIFSArray={props.GIFSArray}\r\n            currentGIF={props.currentGIF}\r\n            numberOfSessions={props.numberOfSessions}\r\n            currentSession={props.currentSession}\r\n            setCurrentSession={props.setCurrentSession}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Buttons timerActive={timerActive} setTimerActive={setTimerActive} />\r\n      <SessionSettings\r\n        numberOfSessions={props.numberOfSessions}\r\n        setNumberOfSessions={props.setNumberOfSessions}\r\n      />\r\n      <PlantSettings\r\n        currentActivity={props.currentActivity}\r\n        GIFSArray={props.GIFSArray}\r\n        setGIFSArray={props.setGIFSArray}\r\n        currentGIF={props.currentGIF}\r\n        setCurrentGIF={props.setCurrentGIF}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Plant;\r\n","import React from \"react\";\r\nimport Plant from \"./Plant\";\r\n\r\nconst SessionPlant = (props) => {\r\n  return (\r\n    <Plant\r\n      currentActivity={props.currentActivity}\r\n      setCurrentActivity={props.setCurrentActivity}\r\n      startStep={props.sessionStartStep}\r\n      setStartStep={props.setSessionStartStep}\r\n      GIFSArray={props.GIFSArray}\r\n      setGIFSArray={props.setGIFSArray}\r\n      currentGIF={props.currentGIF}\r\n      setCurrentGIF={props.setCurrentGIF}\r\n      numberOfSessions={props.numberOfSessions}\r\n      setNumberOfSessions={props.setNumberOfSessions}\r\n      currentSession={props.currentSession}\r\n      setCurrentSession={props.setCurrentSession}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SessionPlant;\r\n","import React from \"react\";\r\nimport Plant from \"./Plant\";\r\n\r\nconst PausePlant = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <Plant\r\n      currentActivity={props.currentActivity}\r\n      setCurrentActivity={props.setCurrentActivity}\r\n      startStep={props.pauseStartStep}\r\n      setStartStep={props.setPauseStartStep}\r\n      GIFSArray={props.GIFSArray}\r\n      setGIFSArray={props.setGIFSArray}\r\n      currentGIF={props.currentGIF}\r\n      setCurrentGIF={props.setCurrentGIF}\r\n      numberOfSessions={props.numberOfSessions}\r\n      setNumberOfSessions={props.setNumberOfSessions}\r\n      currentSession={props.currentSession}\r\n      setCurrentSession={props.setCurrentSession}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PausePlant;\r\n","import React from \"react\";\r\n\r\nconst SessionControl = ({ currentActivity, setCurrentActivity }) => {\r\n  const changeActivity = (e) => {\r\n    // console.log(e.target.id);\r\n    if (e.target.id === \"pause\") {\r\n      document\r\n        .getElementById(\"session\")\r\n        .classList.remove(\"sessionControlActive\");\r\n      document.getElementById(\"pause\").classList.add(\"sessionControlActive\");\r\n\r\n      setCurrentActivity(\"pause\");\r\n    } else if (e.target.id === \"session\") {\r\n      document.getElementById(\"pause\").classList.remove(\"sessionControlActive\");\r\n      document.getElementById(\"session\").classList.add(\"sessionControlActive\");\r\n\r\n      setCurrentActivity(\"session\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sessionControlContainer\" onClick={changeActivity}>\r\n      <p\r\n        id=\"session\"\r\n        className={`sessionControlButtons ${\r\n          currentActivity === \"session\" ? \"sessionControlActive\" : \"\"\r\n        }`}\r\n      >\r\n        Session\r\n      </p>\r\n      <p\r\n        id=\"pause\"\r\n        className={`sessionControlButtons ${\r\n          currentActivity === \"pause\" ? \"sessionControlActive\" : \"\"\r\n        }`}\r\n      >\r\n        &nbsp;Pause&nbsp;\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SessionControl;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport SessionPlant from \"./SessionPlant\";\r\nimport PausePlant from \"./PausePlant\";\r\n\r\nimport SessionControl from \"./SessionControl\";\r\n\r\nconst MainScreen = (props) => {\r\n  const [currentActivity, setCurrentActivity] = useState(\"pause\");\r\n  const [pauseStartStep, setPauseStartStep] = useState(1);\r\n  const [sessionStartStep, setSessionStartStep] = useState(9);\r\n  const [numberOfSessions, setNumberOfSessions] = useState(2);\r\n  const [currentSession, setCurrentSession] = useState(1);\r\n\r\n  const [pauseGIFSArray, setPauseGIFSArray] = useState([\r\n    \"https://media0.giphy.com/media/XPdR7H122vZ1C/giphy.gif?cid=790b7611f6dfedca30056047728a8ae9027975ad8723943a&rid=giphy.gif&ct=g\",\r\n  ]);\r\n  const [sessionGIFSArray, setSessionGIFSArray] = useState([\r\n    \"https://i.pinimg.com/originals/ab/e1/72/abe17294582423e00db65c85aba185d8.gif\",\r\n  ]);\r\n\r\n  const [currentSessionGIF, setCurrentSessionGIF] = useState(0);\r\n  const [currentPauseGIF, setCurrentPauseGIF] = useState(0);\r\n\r\n  // useEffect(() => {\r\n  //   if (\r\n  //     document.getElementById(\"pauseBackground\") &&\r\n  //     document.getElementById(\"sessionBackground\")\r\n  //   ) {\r\n  //     document.getElementById(\"pauseBackground\").style.backgroundImage =\r\n  //       pauseGIFSArray[currentPauseGIF];\r\n  //     document.getElementById(\"sessionBackground\").style.backgroundImage =\r\n  //       sessionGIFSArray[currentSessionGIF];\r\n  //   }\r\n  // });\r\n\r\n  // const handleRangeInput = (e) => {\r\n  //   // console.log(\"e\", e.target.value);\r\n  //   document.querySelector(\r\n  //     \".timerBackground\"\r\n  //   ).style.backgroundPosition = `${100 - e.target.value}%`;\r\n  // };\r\n\r\n  return (\r\n    <div className=\"mainScreenContainer\">\r\n      <SessionControl\r\n        currentActivity={currentActivity}\r\n        setCurrentActivity={setCurrentActivity}\r\n      />\r\n\r\n      {currentActivity === \"session\" ? (\r\n        <SessionPlant\r\n          currentActivity={currentActivity}\r\n          setCurrentActivity={setCurrentActivity}\r\n          sessionStartStep={sessionStartStep}\r\n          setSessionStartStep={setSessionStartStep}\r\n          GIFSArray={sessionGIFSArray}\r\n          setGIFSArray={setSessionGIFSArray}\r\n          currentGIF={currentSessionGIF}\r\n          setCurrentGIF={setCurrentSessionGIF}\r\n          numberOfSessions={numberOfSessions}\r\n          setNumberOfSessions={setNumberOfSessions}\r\n          currentSession={currentSession}\r\n          setCurrentSession={setCurrentSession}\r\n        />\r\n      ) : (\r\n        <PausePlant\r\n          currentActivity={currentActivity}\r\n          setCurrentActivity={setCurrentActivity}\r\n          pauseStartStep={pauseStartStep}\r\n          setPauseStartStep={setPauseStartStep}\r\n          GIFSArray={pauseGIFSArray}\r\n          setGIFSArray={setPauseGIFSArray}\r\n          currentGIF={currentPauseGIF}\r\n          setCurrentGIF={setCurrentPauseGIF}\r\n          numberOfSessions={numberOfSessions}\r\n          setNumberOfSessions={setNumberOfSessions}\r\n          currentSession={currentSession}\r\n          setCurrentSession={setCurrentSession}\r\n        />\r\n      )}\r\n\r\n      {/* <input\r\n        type=\"range\"\r\n        id=\"bg_position\"\r\n        name=\"bg_position\"\r\n        min=\"0\"\r\n        max=\"100\"\r\n        // value=\"50\"\r\n        onChange={handleRangeInput}\r\n      ></input>\r\n      <input id=\"bg_url\" placeholder=\"Paste link to your GIF here\"></input> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainScreen;\r\n","// import logo from \"./logo.svg\";\nimport React from \"react\";\n\n// import Header from \"./Components/HeaderContainer/Header\";\nimport MainScreen from \"./Components/MainScreenContainer/MainScreen\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Header /> */}\n      <MainScreen />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./styles.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}